---
import { Icon } from "astro-icon/components";
import { navBarConfig, profileConfig, siteConfig } from "../config";
import { LinkPresets } from "../constants/link-presets";
import { LinkPreset, type NavBarLink } from "../types/config";
import { url } from "../utils/url-utils";
import LightDarkSwitch from "./LightDarkSwitch.svelte";
import ImageWrapper from "./misc/ImageWrapper.astro";
import Search from "./Search.svelte";
import DisplaySettings from "./widget/DisplaySettings.svelte";
import NavMenuPanel from "./widget/NavMenuPanel.astro";

const config = profileConfig;
const className = Astro.props.class;

let links: NavBarLink[] = navBarConfig.links.map(
	(item: NavBarLink | LinkPreset): NavBarLink => {
		if (typeof item === "number") {
			return LinkPresets[item];
		}
		return item;
	},
);
---

<div id="navbar" class="z-50 onload-animation sticky pt-2 mt-4 flex justify-center">
    <div class={`relative w-full max-w-[var(--page-width)] h-16 rounded-full bg-[var(--card-bg)] flex items-center justify-between px-2 shadow-lg ${className}`}>

        <!-- Perfil + título -->
        <a href={url('/')} class="btn-plain scale-animation rounded-full h-12 px-2 font-bold active:scale-95 flex items-center text-[var(--primary)] space-x-3">
            <!-- Imagen redondeada -->
            <div class="w-8 h-8 rounded-full overflow-hidden flex items-center justify-center">
                <ImageWrapper src={config.avatar || ""} alt="Profile Image of the Author" class="w-full h-full object-cover"></ImageWrapper>
            </div>
            <!-- Título -->
            <span>{siteConfig.title}</span>
        </a>

        <!-- Links principales -->
        <div class="hidden md:flex space-x-3">
            {links.map((l) => {
                return <a aria-label={l.name} href={l.external ? l.url : url(l.url)} target={l.external ? "_blank" : null}
                          class="btn-plain scale-animation rounded-full h-10 px-4 font-bold active:scale-95 flex items-center">
                    {l.name}
                    {l.external && <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.875rem] ml-1 text-black/[0.2] dark:text-white/[0.2]"></Icon>}
                </a>;
            })}
        </div>

        <!-- Botones de utilidades -->
        <div class="flex space-x-2">
            <Search client:only="svelte"></Search>
            {!siteConfig.themeColor.fixed && (
                <button aria-label="Display Settings" class="btn-plain scale-animation rounded-full h-10 w-10 active:scale-90 flex items-center justify-center" id="display-settings-switch">
                    <Icon name="material-symbols:palette-outline" class="text-[1.25rem]"></Icon>
                </button>
            )}
            <LightDarkSwitch client:only="svelte"></LightDarkSwitch>
            <button aria-label="Menu" name="Nav Menu" class="btn-plain scale-animation rounded-full w-10 h-10 active:scale-90 md:hidden flex items-center justify-center" id="nav-menu-switch">
                <Icon name="material-symbols:menu-rounded" class="text-[1.25rem]"></Icon>
            </button>
        </div>

        <NavMenuPanel links={links}></NavMenuPanel>
        <DisplaySettings client:only="svelte"></DisplaySettings>
    </div>
</div>

<script>
function switchTheme() {
    if (localStorage.theme === 'dark') {
        document.documentElement.classList.remove('dark');
        localStorage.theme = 'light';
    } else {
        document.documentElement.classList.add('dark');
        localStorage.theme = 'dark';
    }
}

function loadButtonScript() {
    let switchBtn = document.getElementById("scheme-switch");
    if (switchBtn) switchBtn.onclick = () => switchTheme();

    let settingBtn = document.getElementById("display-settings-switch");
    if (settingBtn) settingBtn.onclick = () => {
        const settingPanel = document.getElementById("display-setting");
        if (settingPanel) settingPanel.classList.toggle("float-panel-closed");
    };

    let menuBtn = document.getElementById("nav-menu-switch");
    if (menuBtn) menuBtn.onclick = () => {
        const menuPanel = document.getElementById("nav-menu-panel");
        if (menuPanel) menuPanel.classList.toggle("float-panel-closed");
    };
}

loadButtonScript();
</script>

{import.meta.env.PROD && <script is:inline define:vars={{scriptUrl: url('/pagefind/pagefind.js')}}>
async function loadPagefind() {
    try {
        const response = await fetch(scriptUrl, { method: 'HEAD' });
        if (!response.ok) throw new Error(`Pagefind script not found: ${response.status}`);

        const pagefind = await import(scriptUrl);
        await pagefind.options({ excerptLength: 20 });
        window.pagefind = pagefind;
        document.dispatchEvent(new CustomEvent('pagefindready'));
        console.log('Pagefind loaded and initialized successfully.');
    } catch (error) {
        console.error('Failed to load Pagefind:', error);
        window.pagefind = { search: () => Promise.resolve({ results: [] }), options: () => Promise.resolve() };
        document.dispatchEvent(new CustomEvent('pagefindloaderror'));
    }
}

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadPagefind);
} else {
    loadPagefind();
}
</script>}
